import unittest
from bisect import insort
from heapq import heappop, heappush


class ExamRoom:

    def __init__(self, n: int):
        self.n = n
        self.heap = [(-n, 0, n - 1)]
        self.starts = {0: n - 1}
        self.ends = {n - 1: 0}

    def seat(self) -> int:
        _, st, end = heappop(self.heap)
        while st not in self.starts or self.starts[st] != end:
            _, st, end = heappop(self.heap)

        if st == 0:
            st += 1
            self.push(st, end)
            self.starts.pop(0)
            self.starts[st] = end
            self.ends[end] = st
            return 0
        elif end == self.n - 1:
            end -= 1
            self.push(st, end)
            self.ends.pop(self.n - 1)
            self.starts[st] = end
            self.ends[end] = st
            return self.n - 1
        else:
            mid = (st + end) // 2
            self.push(st, mid - 1)
            self.push(mid + 1, end)
            self.starts[st] = mid - 1
            self.starts[mid + 1] = end
            self.ends[mid - 1] = st
            self.ends[end] = mid + 1
            return mid

    def leave(self, p: int) -> None:
        if p == 0:
            end = self.starts.pop(p + 1)
            self.push(p, end)
            self.starts[p] = end
            self.ends[end] = p
        elif p == self.n - 1:
            st = self.ends.pop(p - 1)
            self.push(st, p)
            self.starts[st] = p
            self.ends[p] = st
        else:
            st = self.ends.pop(p - 1)
            end = self.starts.pop(p + 1)
            self.push(st, end)
            self.starts[st] = end
            self.ends[end] = st

    def dist(self, st, end) -> int:
        if st == 0:
            return end + 1
        if end == self.n - 1:
            return self.n - st
        return (end - st) // 2 + 1

    def push(self, st, end):
        heappush(self.heap, (-self.dist(st, end), st, end))


# Your ExamRoom object will be instantiated and called as such:
# obj = ExamRoom(n)
# param_1 = obj.seat()
# obj.leave(p)
class ListNode:
    def __init__(self, val=0, prev=None, next=None):
        self.val = val
        self.prev = prev
        self.next = next

    def __repr__(self):
        return f"ListNode({self.val})"

    def delete(self):
        self.prev.next, self.next.prev = self.next, self.prev

    def insert_after(self, other):
        nxt = other.next
        other.next = self
        self.prev = other
        self.next = nxt
        nxt.prev = self


class ExamRoom1:
    def __init__(self, n: int):
        self.start = ListNode(val=-1)
        self.end = ListNode(val=n, prev=self.start)
        self.start.next = self.end
        self.nodes = {-1: self.start, n: self.end}
        self.heap = [(-n, -1, n)]
        self.n = n

    def seat(self) -> int:
        while True:
            dist, st, end = heappop(self.heap)
            stn = self.nodes.get(st, None)
            if stn and stn.next is self.nodes.get(end, None):
                break

        i = 0 if st == -1 else self.n - 1 if end == self.n else st - dist
        curr = ListNode(val=i)
        curr.insert_after(stn)

        self.push(st, i)
        self.push(i, end)
        self.nodes[i] = curr

        return i

    def leave(self, p: int) -> None:
        curr = self.nodes[p]
        st, end = curr.prev.val, curr.next.val
        self.push(st, end)

        curr.delete()
        del self.nodes[p]

    def push(self, st, end):
        if st == -1:
            heappush(self.heap, (-end, st, end))
        elif end == self.n:
            heappush(self.heap, (st - end + 1, st, end))
        else:
            heappush(self.heap, (-((end - st) // 2), st, end))


class ExamRoom2:
    def __init__(self, n: int):
        self.state = []
        self.n = n

    def seat(self) -> int:
        if not self.state:
            self.state.append(0)
            return 0

        pos = 0
        prev = self.state[0]
        max_dist = self.state[0]
        for curr in self.state[1:]:
            dist = (curr - prev) // 2
            if max_dist < dist:
                max_dist = dist
                pos = prev + dist
            prev = curr

        if max_dist < self.n - prev - 1:
            max_dist = self.n - prev - 1
            pos = self.n - 1

        insort(self.state, pos)
        return pos

    def leave(self, p: int) -> None:
        self.state.remove(p)


class TreeNode:
    def __init__(self, start, end, dist=0, left=None, right=None):
        self.start = start
        self.end = end
        self.dist = dist
        self.left = left
        self.right = right


class ExamRoom3:
    def __init__(self, n: int):
        self.n = n
        self.root = TreeNode(start=-1, end=n, dist=n)

    def seat(self) -> int:
        def dfs(node) -> int:
            if not node.left:
                if node.start == -1:
                    i = 0
                elif node.end == self.n:
                    i = self.n - 1
                else:
                    i = (node.start + node.end) // 2
                node.left = TreeNode(node.start, i)
                node.right = TreeNode(i, node.end)
                self._update_dist(node.left)
                self._update_dist(node.right)
            elif node.dist == node.left.dist:
                i = dfs(node.left)
            else:
                i = dfs(node.right)

            self._update_dist(node)
            return i

        return dfs(self.root)

    def leave(self, p: int) -> None:
        def dfs(node) -> None:
            if node.left.end > p:
                dfs(node.left)
            elif node.left.end < p:
                dfs(node.right)
            elif p > (node.start + node.end) // 2:
                self._move_left(node)
            else:
                self._move_right(node)

            self._update_dist(node)

        dfs(self.root)

    def _update_dist(self, node) -> None:
        if node.left:
            node.dist = max(node.left.dist, node.right.dist)
        elif node.start == -1:
            node.dist = node.end
        elif node.end == self.n:
            node.dist = self.n - node.start - 1
        else:
            node.dist = (node.end - node.start) // 2

    def _get_stacks(self, node):
        l_stack, curr = [], node.left
        while curr:
            l_stack.append(curr)
            curr = curr.right

        r_stack, curr = [], node.right
        while curr:
            r_stack.append(curr)
            curr = curr.left

        return l_stack, r_stack

    def _move_left(self, node):
        l_stack, r_stack = self._get_stacks(node)
        bound = l_stack[-1].start

        for l_node in reversed(l_stack):
            l_node.end = bound
            self._update_dist(l_node)

        for r_node in reversed(r_stack):
            r_node.start = bound
            self._update_dist(r_node)

        if len(l_stack) == 1:
            node.left = node.right.left
            node.right = node.right.right
        elif len(l_stack) == 2:
            node.left = l_stack[0].left
        else:
            l_stack[-3].right = l_stack[-2].left

    def _move_right(self, node):
        l_stack, r_stack = self._get_stacks(node)
        bound = r_stack[-1].end

        for r_node in reversed(r_stack):
            r_node.start = bound
            self._update_dist(r_node)

        for l_node in reversed(l_stack):
            l_node.end = bound
            self._update_dist(l_node)

        if len(r_stack) == 1:
            node.right = node.left.right
            node.left = node.left.left
        elif len(r_stack) == 2:
            node.right = r_stack[0].right
        else:
            r_stack[-3].left = r_stack[-2].right


class TreeNodeBalanced:
    def __init__(self, start, end, dist=0, height=0, left=None, right=None):
        self.start = start
        self.end = end
        self.dist = dist
        self.height = height
        self.left = left
        self.right = right

    def update_height(self):
        if self.left:
            self.height = max(self.left.height, self.right.height) + 1
        else:
            self.height = 0

    def __repr__(self):
        return f"TreeNodeBalanced({self.start}, {self.end}, dist={self.dist}, height={self.height})"


class ExamRoom4:
    def __init__(self, n: int):
        self.n = n
        self.root = TreeNodeBalanced(start=-1, end=n, dist=n)

    def seat(self) -> int:
        def dfs(node) -> int:
            if not node.left:
                if node.start == -1:
                    i = 0
                elif node.end == self.n:
                    i = self.n - 1
                else:
                    i = (node.start + node.end) // 2
                node.left = TreeNodeBalanced(node.start, i)
                node.right = TreeNodeBalanced(i, node.end)
                self._update_dist(node.left)
                self._update_dist(node.right)
            elif node.dist == node.left.dist:
                i = dfs(node.left)
            else:
                i = dfs(node.right)

            self._balance(node)

            return i

        return dfs(self.root)

    def leave(self, p: int) -> None:
        def dfs(node) -> None:
            if node.left.end > p:
                dfs(node.left)
            elif node.left.end < p:
                dfs(node.right)
            elif node.left.height < node.right.height:
                self._move_pivot_right(node)
            else:
                self._move_pivot_left(node)

            self._balance(node)

        dfs(self.root)

    def _update_dist(self, node) -> None:
        if node.left:
            node.dist = max(node.left.dist, node.right.dist)
        elif node.start == -1:
            node.dist = node.end
        elif node.end == self.n:
            node.dist = self.n - node.start - 1
        else:
            node.dist = (node.end - node.start) // 2

    @staticmethod
    def _get_stacks(node):
        l_stack, curr = [], node.left
        while curr:
            l_stack.append(curr)
            curr = curr.right

        r_stack, curr = [], node.right
        while curr:
            r_stack.append(curr)
            curr = curr.left

        return l_stack, r_stack

    def _move_pivot_left(self, node):
        l_stack, r_stack = self._get_stacks(node)
        new_pivot = l_stack.pop().start

        for r_node in reversed(r_stack):
            r_node.start = new_pivot
            self._update_dist(r_node)

        if not l_stack:
            node.left = node.right.left
            node.right = node.right.right
        elif len(l_stack) == 1:
            node.left = l_stack[0].left
        else:
            last = l_stack.pop()
            l_stack[-1].right = last.left
            for l_node in reversed(l_stack):
                l_node.end = new_pivot
                self._balance(l_node)

    def _move_pivot_right(self, node):
        l_stack, r_stack = self._get_stacks(node)
        new_pivot = r_stack.pop().end

        for l_node in reversed(l_stack):
            l_node.end = new_pivot
            self._update_dist(l_node)

        if not r_stack:
            node.right = node.left.right
            node.left = node.left.left
        elif len(r_stack) == 1:
            node.right = r_stack[0].right
        else:
            last = r_stack.pop()
            r_stack[-1].left = last.right
            for r_node in reversed(r_stack):
                r_node.start = new_pivot
                self._balance(r_node)

    def _rotate_left(self, node):

        if node.right.left.height > node.right.right.height:
            self._rotate_right(node.right)

        nl, nrl = node.left, node.right.left
        node.left = TreeNodeBalanced(
            start=nl.start,
            end=nrl.end,
            dist=max(nl.dist, nrl.dist),
            height=max(nl.height, nrl.height) + 1,
            left=nl,
            right=nrl,
        )
        node.right = node.right.right
        node.update_height()
        self._update_dist(node)

    def _rotate_right(self, node):

        if node.left.right.height > node.left.left.height:
            self._rotate_left(node.left)

        nlr, nr = node.left.right, node.right
        node.right = TreeNodeBalanced(
            start=nlr.start,
            end=nr.end,
            dist=max(nlr.dist, nr.dist),
            height=max(nlr.height, nr.height) + 1,
            left=nlr,
            right=nr,
        )
        node.left = node.left.left
        node.update_height()
        self._update_dist(node)

    def _balance(self, node):
        bal = node.right.height - node.left.height if node.left else 0
        if bal > 1:
            self._rotate_left(node)
        elif bal < -1:
            self._rotate_right(node)
        else:
            node.update_height()
            self._update_dist(node)

# Your ExamRoom object will be instantiated and called as such:
# obj = ExamRoom(n)
# param_1 = obj.seat()
# obj.leave(p)


class TestExamRoom(unittest.TestCase):
    def test_seat_leave_methods_1(self):
        print("Test ExamRoom 1 ... ")
        commands = ["ExamRoom", "seat", "seat", "seat", "seat", "leave", "seat"]
        params = [[10], [], [], [], [], [4], []]
        expected = [None, 0, 9, 4, 2, None, 5]
        exam_room = ExamRoom(*params[0])
        for i in range(1, len(commands)):
            print(f"    Test {i} ... ", end="")
            res = getattr(exam_room, commands[i])(*params[i])
            self.assertEqual(res, expected[i])
            print("OK")
        print("DONE\n")

    def test_seat_leave_methods_2(self):
        print("Test ExamRoom 2 ... ")
        commands = [
            "ExamRoom",
            "seat",
            "seat",
            "seat",
            "leave",
            "leave",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
        ]
        params = [[8], [], [], [], [0], [7], [], [], [], [], [], [], []]
        expected = [None, 0, 7, 3, None, None, 7, 0, 5, 1, 2, 4, 6]
        exam_room = ExamRoom(*params[0])
        for i in range(1, len(commands)):
            print(f"    Test {i} ... ", end="")
            res = getattr(exam_room, commands[i])(*params[i])
            self.assertEqual(res, expected[i])
            print("OK")
        print("DONE\n")

    def test_seat_leave_methods_3(self):
        print("Test ExamRoom 3 ... ")
        commands = [
            "ExamRoom",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "leave",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
            "seat",
        ]
        params = [
            [1000000],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [624999],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
        ]
        expected = [
            None,
            0,
            999999,
            499999,
            749999,
            249999,
            374999,
            624999,
            874999,
            124999,
            187499,
            312499,
            None,
            624999,
            437499,
            562499,
            687499,
            812499,
            937499,
            62499,
            93749,
            156249,
            218749,
            281249,
            343749,
            406249,
            468749,
            531249,
            593749,
            656249,
            718749,
            781249,
            843749,
            906249,
            968749,
            31249,
            46874,
            78124,
            109374,
            140624,
            171874,
            203124,
            234374,
            265624,
            296874,
            328124,
            359374,
            390624,
            421874,
            453124,
            484374,
            515624,
            546874,
            578124,
            609374,
            640624,
            671874,
            703124,
            734374,
            765624,
            796874,
            828124,
            859374,
            890624,
            921874,
            953124,
            984374,
            15624,
            7812,
            23436,
            39061,
            54686,
            70311,
            85936,
            101561,
            117186,
            132811,
            148436,
            164061,
            179686,
            195311,
            210936,
            226561,
            242186,
            257811,
            273436,
            289061,
            304686,
            320311,
            335936,
            351561,
            367186,
            382811,
            398436,
            414061,
            429686,
            445311,
            460936,
            476561,
            492186,
            507811,
            523436,
            539061,
            554686,
            570311,
            585936,
            601561,
            617186,
            632811,
            648436,
            664061,
            679686,
            695311,
            710936,
            726561,
            742186,
            757811,
            773436,
            789061,
            804686,
            820311,
            835936,
            851561,
            867186,
            882811,
            898436,
            914061,
            929686,
            945311,
            960936,
            976561,
            992186,
            3906,
            11718,
            19530,
            27342,
            35155,
            42967,
            50780,
            58592,
            66405,
            74217,
            82030,
            89842,
            97655,
            105467,
            113280,
            121092,
            128905,
            136717,
            144530,
            152342,
            160155,
            167967,
            175780,
            183592,
            191405,
            199217,
            207030,
            214842,
            222655,
            230467,
            238280,
            246092,
            253905,
            261717,
            269530,
            277342,
            285155,
            292967,
            300780,
            308592,
            316405,
            324217,
            332030,
            339842,
            347655,
            355467,
            363280,
            371092,
            378905,
            386717,
            394530,
            402342,
            410155,
            417967,
            425780,
            433592,
            441405,
            449217,
            457030,
            464842,
            472655,
            480467,
            488280,
            496092,
            503905,
            511717,
            519530,
            527342,
            535155,
            542967,
            550780,
            558592,
            566405,
            574217,
            582030,
            589842,
            597655,
            605467,
            613280,
            621092,
            628905,
            636717,
            644530,
            652342,
            660155,
            667967,
            675780,
            683592,
            691405,
            699217,
            707030,
            714842,
            722655,
            730467,
            738280,
            746092,
            753905,
            761717,
            769530,
            777342,
            785155,
            792967,
            800780,
            808592,
            816405,
            824217,
            832030,
            839842,
            847655,
            855467,
            863280,
            871092,
            878905,
            886717,
            894530,
            902342,
            910155,
            917967,
            925780,
            933592,
            941405,
            949217,
            957030,
            964842,
            972655,
            980467,
            988280,
            996092,
            1953,
            5859,
            9765,
            13671,
            17577,
            21483,
            25389,
            29295,
            33202,
            37108,
            41014,
            44920,
            48827,
            52733,
            56639,
            60545,
            64452,
            68358,
            72264,
            76170,
            80077,
            83983,
            87889,
            91795,
            95702,
            99608,
            103514,
            107420,
            111327,
            115233,
            119139,
            123045,
            126952,
            130858,
            134764,
            138670,
            142577,
            146483,
            150389,
            154295,
            158202,
            162108,
            166014,
            169920,
            173827,
            177733,
            181639,
            185545,
            189452,
            193358,
            197264,
            201170,
            205077,
            208983,
            212889,
            216795,
            220702,
            224608,
            228514,
            232420,
            236327,
            240233,
            244139,
            248045,
            251952,
            255858,
            259764,
            263670,
            267577,
            271483,
            275389,
            279295,
            283202,
            287108,
            291014,
            294920,
            298827,
            302733,
            306639,
            310545,
            314452,
            318358,
            322264,
            326170,
            330077,
            333983,
            337889,
            341795,
            345702,
            349608,
            353514,
            357420,
            361327,
            365233,
            369139,
            373045,
            376952,
            380858,
            384764,
            388670,
            392577,
            396483,
            400389,
            404295,
            408202,
            412108,
            416014,
            419920,
            423827,
            427733,
            431639,
            435545,
            439452,
            443358,
            447264,
            451170,
            455077,
            458983,
            462889,
            466795,
            470702,
            474608,
            478514,
            482420,
            486327,
            490233,
            494139,
            498045,
            501952,
            505858,
            509764,
            513670,
            517577,
            521483,
            525389,
            529295,
            533202,
            537108,
            541014,
            544920,
            548827,
            552733,
            556639,
            560545,
            564452,
            568358,
            572264,
            576170,
            580077,
            583983,
            587889,
            591795,
            595702,
            599608,
            603514,
            607420,
            611327,
            615233,
            619139,
            623045,
            626952,
            630858,
            634764,
            638670,
            642577,
            646483,
            650389,
            654295,
            658202,
            662108,
            666014,
            669920,
            673827,
            677733,
            681639,
            685545,
            689452,
            693358,
            697264,
            701170,
            705077,
            708983,
            712889,
            716795,
            720702,
            724608,
            728514,
            732420,
            736327,
            740233,
            744139,
            748045,
            751952,
            755858,
            759764,
            763670,
            767577,
            771483,
            775389,
            779295,
            783202,
            787108,
            791014,
            794920,
            798827,
            802733,
            806639,
            810545,
            814452,
            818358,
            822264,
            826170,
            830077,
            833983,
            837889,
            841795,
            845702,
            849608,
            853514,
            857420,
            861327,
            865233,
            869139,
            873045,
            876952,
            880858,
            884764,
            888670,
            892577,
            896483,
            900389,
            904295,
            908202,
            912108,
            916014,
            919920,
            923827,
            927733,
            931639,
            935545,
            939452,
            943358,
            947264,
            951170,
            955077,
            958983,
            962889,
            966795,
            970702,
            974608,
            978514,
            982420,
            986327,
            990233,
            994139,
            998045,
            30272,
            45897,
            61522,
            77147,
            92772,
            108397,
            124022,
            139647,
            155272,
            170897,
            186522,
            202147,
            217772,
            233397,
            249022,
            264647,
            280272,
            295897,
            311522,
            327147,
            342772,
            358397,
            374022,
            389647,
            405272,
            420897,
            436522,
            452147,
            467772,
            483397,
            499022,
            514647,
            530272,
            545897,
            561522,
            577147,
            592772,
            608397,
            624022,
            639647,
            655272,
            670897,
            686522,
            702147,
            717772,
            733397,
            749022,
            764647,
            780272,
            795897,
            811522,
            827147,
            842772,
            858397,
            874022,
            889647,
            905272,
            920897,
            936522,
            952147,
            967772,
            983397,
            999022,
            976,
            2929,
            4882,
            6835,
            8788,
            10741,
            12694,
            14647,
            16600,
            18553,
            20506,
            22459,
            24412,
            26365,
            28318,
            32225,
            34178,
            36131,
            38084,
            40037,
            41990,
            43943,
            47850,
            49803,
            51756,
            53709,
            55662,
            57615,
            59568,
            63475,
            65428,
            67381,
            69334,
            71287,
            73240,
            75193,
            79100,
            81053,
            83006,
            84959,
            86912,
            88865,
            90818,
            94725,
            96678,
            98631,
            100584,
            102537,
            104490,
            106443,
            110350,
            112303,
            114256,
            116209,
            118162,
            120115,
            122068,
            125975,
            127928,
            129881,
            131834,
            133787,
            135740,
            137693,
            141600,
            143553,
            145506,
            147459,
            149412,
            151365,
            153318,
            157225,
            159178,
            161131,
            163084,
            165037,
            166990,
            168943,
            172850,
            174803,
            176756,
            178709,
            180662,
            182615,
            184568,
            188475,
            190428,
            192381,
            194334,
            196287,
            198240,
            200193,
            204100,
            206053,
            208006,
            209959,
            211912,
            213865,
            215818,
            219725,
            221678,
            223631,
            225584,
            227537,
            229490,
            231443,
            235350,
            237303,
            239256,
            241209,
            243162,
            245115,
            247068,
            250975,
            252928,
            254881,
            256834,
            258787,
            260740,
            262693,
            266600,
            268553,
            270506,
            272459,
            274412,
            276365,
            278318,
            282225,
            284178,
            286131,
            288084,
            290037,
            291990,
            293943,
            297850,
            299803,
            301756,
            303709,
            305662,
            307615,
            309568,
            313475,
            315428,
            317381,
            319334,
            321287,
            323240,
            325193,
            329100,
            331053,
            333006,
            334959,
            336912,
            338865,
            340818,
            344725,
            346678,
            348631,
            350584,
            352537,
            354490,
            356443,
            360350,
            362303,
            364256,
            366209,
            368162,
            370115,
            372068,
            375975,
            377928,
            379881,
            381834,
            383787,
            385740,
            387693,
            391600,
            393553,
            395506,
            397459,
            399412,
            401365,
            403318,
            407225,
            409178,
            411131,
            413084,
            415037,
            416990,
            418943,
            422850,
            424803,
            426756,
            428709,
            430662,
            432615,
            434568,
            438475,
            440428,
            442381,
            444334,
            446287,
            448240,
            450193,
            454100,
            456053,
            458006,
            459959,
            461912,
            463865,
            465818,
            469725,
            471678,
            473631,
            475584,
            477537,
            479490,
            481443,
            485350,
            487303,
            489256,
            491209,
            493162,
            495115,
            497068,
            500975,
            502928,
            504881,
            506834,
            508787,
            510740,
            512693,
            516600,
            518553,
            520506,
            522459,
            524412,
            526365,
            528318,
            532225,
            534178,
            536131,
            538084,
            540037,
            541990,
            543943,
            547850,
            549803,
            551756,
            553709,
            555662,
            557615,
            559568,
            563475,
            565428,
            567381,
            569334,
            571287,
            573240,
            575193,
            579100,
            581053,
            583006,
            584959,
            586912,
            588865,
            590818,
            594725,
            596678,
            598631,
            600584,
            602537,
            604490,
            606443,
            610350,
            612303,
            614256,
            616209,
            618162,
            620115,
            622068,
            625975,
        ]
        exam_room = ExamRoom(*params[0])
        for i in range(1, len(commands)):
            print(f"    Test {i} ... ", end="")
            res = getattr(exam_room, commands[i])(*params[i])
            self.assertEqual(res, expected[i])
            print("OK")
        print("DONE\n")


if __name__ == "__main__":
    unittest.main()
